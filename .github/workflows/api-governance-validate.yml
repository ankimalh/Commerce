name: PR Information and API Call

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  CLIENT_ID: ${{ secrets.SERVICE_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.SERVICE_CLIENT_SECRET }}


jobs:
  collect-info-and-call-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Git Repo Details
        id: extract_info
        run: |
          REPO_NAME=$(basename ${GITHUB_REPOSITORY})
          REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          echo "REPOSITORY_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "TARGET_BRANCH_NAME=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "REPOSITORY_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "PULL_REQUEST_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Get OAuth token
        id: get_token
        run: |
          # Make a request to your token service to obtain a token
          TOKEN=$(curl -X POST -u "${CLIENT_ID}:${CLIENT_SECRET}" -d "grant_type=client_credentials" https://int-id.cisco.com/oauth2/default/v1/token)
          if [ $? -ne 0 ]; then
            echo "Failed to obtain OAuth token."
            exit 1
          fi
          echo "TOKEN=$(echo $TOKEN | jq -r '.access_token')" >> $GITHUB_ENV


      - name: Call API
        id: call_api
        env:
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
          TARGET_BRANCH_NAME: ${{ env.TARGET_BRANCH_NAME }}
          REPOSITORY_URL: ${{ env.REPOSITORY_URL }}
          PULL_REQUEST_NUMBER: ${{ env.PULL_REQUEST_NUMBER }}
          TOKEN: ${{ env.TOKEN }}
        run: |
          # Construct JSON payload
          JSON_PAYLOAD="{\"domainName\":\"${REPOSITORY_NAME}\",\"domainGitRepo\":\"${REPOSITORY_URL}\",\"domainTargetGitBranch\":\"${TARGET_BRANCH_NAME}\",\"prNumber\":\"${PULL_REQUEST_NUMBER}\"}"
          
          # Replace 'Bearer <token>' with your actual token
          API_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -d "${JSON_PAYLOAD}" https://commerce-dev.cisco.com/api/v2/dv1/api/pull_request/)
          echo "::set-output name=status::$(echo $API_RESPONSE | jq -r '.status')"
          echo "::set-output name=trace_id::$(echo $API_RESPONSE | jq -r '.traceId')"
          if [ "$(echo $API_RESPONSE | jq -r '.status')" == "ERROR" ]; then
            echo "::error::API call failed with errors: $(echo $API_RESPONSE | jq -r '.errors | join(", ")')"
            exit 1
          fi
