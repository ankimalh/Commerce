name: API Governance Validate

on:
  pull_request:
    types:
      - opened
    paths:
      - 'commerce/**'
      
env:
  FLEX_VERSION: '1.3.0'
  GATEWAY_NAME: 'commerce-dev'
  ANYPOINT_HOST: 'anypoint.mulesoft.com'
  APIMETADATA_URL: 'https://api.cisco.com/domain_tbd/sub_domain_tbd/endpoint_tbd/validate-domain'
  ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}
  ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
  ANYPOINT_ORG: ${{ secrets.ANYPOINT_ORG }}
  ANYPOINT_ENVIRONMENT: ${{ secrets.ANYPOINT_ENVIRONMENT }}
  FLEX_GW_AGENT_ID: ${{ secrets.FLEX_GW_AGENT_ID }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Set directory name
        run: |
          for file in ${{ github.event.pull_request.changed_files }}; do
            export DIR_NAME=$(dirname "$file")
            break  # Only need to capture the directory name of the first changed file
          done
        shell: bash

      - name: Set Repo Name and Target Branch
        run: |
          # Retrieve repository name
          repo_name=$(basename "$GITHUB_REPOSITORY")
          
          # Retrieve target branch name
          target_branch=${{ github.head_ref }}
          
          # Export as environment variables
          echo "export REPO_NAME=$repo_name" >> $GITHUB_ENV
          echo "export TARGET_BRANCH=$target_branch" >> $GITHUB_ENV

      - name: Read Descriptor File and Extract Values
        run: |
          # Install PyYAML library for YAML parsing
          pip install pyyaml
      
          # Read the content of the descriptor file
          descriptor_content=$(cat "$DIR_NAME/catalog.yaml")
      
          # Extract values of assetId and version using Python script
          asset_id=$(python - <<EOF
          import yaml
          data = yaml.safe_load("$descriptor_content")
          asset_id = data['projects'][0]['assetId']
          version = data['projects'][0]['version']
          apiPath = data['projects'][0]['main']
          apiName = data['projects'][0]['apiName']
          print(asset_id)
          print(version)
          print(main)
          print(apiName)
          EOF
          )
          echo "Asset ID: $asset_id"
          echo "Version: $version"

          
      - name: Install jq
        run: sudo apt-get install jq
          
      - name: Install api-catalog cli
        run: |
          sudo apt-get update
          npm install -g api-catalog-cli@latest

      - name: Publish to MuleSoft Exchange
        run: | 
          response=$(api-catalog publish-asset --host=$ANYPOINT_HOST -d $DIR_NAME/catalog.yaml --organization=$ANYPOINT_ORG --client_id $ANYPOINT_CLIENT_ID --client_secret $ANYPOINT_CLIENT_SECRET)

          echo "$response"
          
          # # Capture Asset ID
          # asset_id=$(echo "$response" | awk '/Asset ID:/ {print $NF}')
          # echo "Asset_ID: $asset_id"
          # # echo "::set-output name=asset_id::$asset_id"

          # # Capture Version
          # version=$(echo "$response" | awk '/Version:/ {print $NF}')
          # echo "Version: $version"
          # # echo "::set-output name=version::$version"

          # echo "ASSET_ID=$asset_id" >> $GITHUB_ENV
          # echo "VERSION=$version" >> $GITHUB_ENV

      - name: Install anypoint-cli-v4 cli
        run: |
          npm i -g anypoint-cli-v4
          anypoint-cli-v4 plugins:install anypoint-cli-governance-plugin      

      - name: API Governance - Open API Specification Validate
        run: |

          # asset_id=$ASSET_ID
          # version=$VERSION
          
          # echo "$asset_id"
          # echo "$version"

          # Construct the URL
          URL=$ANYPOINT_ORG/$asset_id/$version

          echo "Constructed URL: $URL"

          # Run individual Anypoint CLI commands for each governance check.
          # Run OAS Best Practice Check
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/openapi-best-practices/1.1.0 --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "OAS Validation successful: Spec conforms with Ruleset"
          else
            echo "OAS Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi

      - name: API Governance - Security Check
        run: |

          # asset_id=$ASSET_ID
          # version=$VERSION
          
          # echo "$asset_id"
          # echo "$version"

          # Construct the URL
          URL=$ANYPOINT_ORG/$asset_id/$version

          echo "Constructed URL: $URL"
          
          # Run HTTPS Check
          
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/https-enforcement/1.1.1 --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "HTTPS Validation successful: Spec conforms with Ruleset"
          else
            echo "HTTPS Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi

          # Run Security Check   
          
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/authentication-security-best-practices/minor/1.1/ --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "Security Validation successful: Spec conforms with Ruleset"
          else
            echo "Security Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi


      - name: API Governance - CISCO API Style Guide Check
        run: |

          asset_id=$ASSET_ID

      - name: OAuth2 login
        run: |
          response=$(curl -s -w "%{http_code}" --location --request POST 'https://int-id.cisco.com/oauth2/default/v1/token' -o 'login-response' \
                    --header 'Content-Type: application/json' \
                    --data-raw '{"grant_type": "client_credentials", "client_id": "${{ secrets.OAUTH_CLIENT_ID }}", "client_secret": "${{ secrets.OAUTH_CLIENT_SECRET }}"}')
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          if [ $status_code -gt 399 ]; then
            echo "Anypoint login failed"
            exit 1
          fi

          - name: Call API Meta Data Check and Handle Response
          run: |
            response=$(curl --location $APIMETADATA_URL \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer $login_response" \
              --data '{
                "domain": {
                  "domainName": "<string>",
                  "domainGitRepo": "<string>",
                  "domainGitBranch": "<string>"
                },
                "apis": [
                  {
                    "apiPath": "<string>",
                    "apiName": "<string>",
                    "apiVersion": "<string>",
                    "apiGateway": "<string>",
                    "apiGatewayServers": [
                      {
                        "lifecycle": "<string>",
                        "server": "<string>"
                      },
                      {
                        "lifecycle": "<string>",
                        "server": "<string>"
                      }
                    ],
                    "apiId": "<string>",
                    "action": "PUBLISH"
                  }
                ]
              }')
        
            # Extract status from response JSON
            status=$(echo "$response" | jq -r '.status')
        
            # Check if status is SUCCESS or FAILURE
            if [ "$status" = "SUCCESS" ]; then
              echo "API call successful!"
            else
              echo "API call failed!"
              errors=$(echo "$response" | jq -r '.errors | @csv')
              echo "Errors: $errors"
            fi
  
