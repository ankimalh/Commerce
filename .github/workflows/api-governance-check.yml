name: API Governance Validate

on:
  pull_request:
    types:
      - opened
      
env:
  FLEX_VERSION: '1.3.0'
  GATEWAY_NAME: 'commerce-dev'
  ANYPOINT_HOST: 'anypoint.mulesoft.com'
  ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}
  ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
  ANYPOINT_ORG: ${{ secrets.ANYPOINT_ORG }}
  ANYPOINT_ENVIRONMENT: ${{ secrets.ANYPOINT_ENVIRONMENT }}
  FLEX_GW_AGENT_ID: ${{ secrets.FLEX_GW_AGENT_ID }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Read Descriptor File and Extract Values
        run: |
          # Install PyYAML library for YAML parsing
          pip install pyyaml

          # Read the content of the descriptor file
          descriptor_content=$(<commerce/finance/linter/v1/catalog.yaml)

          # Extract values of assetId and version using Python script
          python - <<EOF
              import yaml
              data = yaml.safe_load("$descriptor_content")
              asset_id = data['projects'][0]['assetId']
              version = data['projects'][0]['version']
              print(f"Asset ID: {asset_id}")
              print(f"Version: {version}")
          EOF
          
      - name: Install jq
        run: sudo apt-get install jq
          
      - name: Install api-catalog cli
        run: |
          sudo apt-get update
          npm install -g api-catalog-cli@latest

      - name: Publish to MuleSoft Exchange
        run: | 
          response=$(api-catalog publish-asset --host=$ANYPOINT_HOST -d catalog.yaml --organization=$ANYPOINT_ORG --client_id $ANYPOINT_CLIENT_ID --client_secret $ANYPOINT_CLIENT_SECRET)

          echo "$response"
          
          # Capture Asset ID
          asset_id=$(echo "$response" | awk '/Asset ID:/ {print $NF}')
          echo "Asset_ID: $asset_id"
          # echo "::set-output name=asset_id::$asset_id"

          # Capture Version
          version=$(echo "$response" | awk '/Version:/ {print $NF}')
          echo "Version: $version"
          # echo "::set-output name=version::$version"

          echo "ASSET_ID=$asset_id" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Install anypoint-cli-v4 cli
        run: |
          npm i -g anypoint-cli-v4
          anypoint-cli-v4 plugins:install anypoint-cli-governance-plugin      

      - name: API Governance - Open API Specification Validate
        run: |

          asset_id=$ASSET_ID
          version=$VERSION
          
          echo "$asset_id"
          echo "$version"

          # Construct the URL
          URL=$ANYPOINT_ORG/$asset_id/$version

          echo "Constructed URL: $URL"

          # Run individual Anypoint CLI commands for each governance check.
          # Run OAS Best Practice Check
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/openapi-best-practices/1.1.0 --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          # # Check if the error message exists in the response
          # if [[ "$response" == *"Spec does not conform with Ruleset"* ]]; then
          #   echo "Validation failed: Spec does not conform with Ruleset"
          #   exit 1  # Exit with a non-zero code to indicate failure
          # fi

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "OAS Validation successful: Spec conforms with Ruleset"
          else
            echo "OAS Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi
          
          # Run HTTPS Check
          
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/https-enforcement/1.1.1 --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "HTTPS Validation successful: Spec conforms with Ruleset"
          else
            echo "HTTPS Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi

          # Run Security Check   
          
          response=$(anypoint-cli-v4 governance api validate --client_id=$ANYPOINT_CLIENT_ID --client_secret=$ANYPOINT_CLIENT_SECRET --organization=$ANYPOINT_ORG $URL --remote-rulesets 68ef9520-24e9-4cf2-b2f5-620025690913/authentication-security-best-practices/minor/1.1/ --remote)
          status_code=$(echo "${response: -3}") # Extracting the status code from the response

          echo "$response"
          echo "$status_code"

          if [[ "$response" == *"Spec conforms with Ruleset"* ]]; then
            echo "Security Validation successful: Spec conforms with Ruleset"
          else
            echo "Security Validation failed: Spec does not conform with Ruleset"
            exit 1  # Exit with a non-zero code to indicate failure
          fi

      - name: API Meta Check
        run: |

          asset_id=$ASSET_ID
          version=$VERSION    
